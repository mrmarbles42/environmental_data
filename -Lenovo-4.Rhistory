fit2 <- anova(lm(delo$body_mass ~ delo$sex))
fit3 <- anova(lm(delo$body_mass ~ delo$binomial))
fit4 <- anova(lm(delo$body_mass ~ delo$binomial + delo$sex))
fit5 <- anova(lm(delo$body_mass ~ delo$binomial * delo$sex))
fit2 <- lm(delo$body_mass ~ delo$sex)
anova(fit2)
fit3 <- lm(delo$body_mass ~ delo$binomial)
anova(fit3)
fit4 <- lm(delo$body_mass ~ delo$binomial + delo$sex)
anova(fit4)
fit5 <- lm(delo$body_mass ~ delo$binomial * delo$sex)
anova(fit5)
shapiro.test(resid(fit1))
shapiro.test(resid(fit2))
shapiro.test(resid(fit3))
shapiro.test(resid(fit4))
shapiro.test(resid(fit5))
##Q5-6
hist(resid(fit1))
##Q5-6
hist(resid(fit1))
hist(resid(fit2))
hist(resid(fit3))
hist(resid(fit4))
hist(resid(fit5))
##Q5-6
hist(resid(fit1))
hist(resid(fit2))
hist(resid(fit3))
hist(resid(fit4))
hist(resid(fit5))
source("C:/Users/user/OneDrive - University of Massachusetts/Documents/environmental_data/Models_2.R", echo=TRUE)
summary(fit_both)
#Q4
fit_both <- lm(body_mass_g ~ sex ** species, data = penguins)
summary(fit_both)
#Q4
fit_both <- lm(body_mass_g ~ sex * species, data = penguins)
summary(fit_both)
#Q4
fit_both <- lm(body_mass_g ~species * sex, data = penguins)
summary(fit_both)
chinstrap_fem <- subset(penguins, species == "Chinstrap")
chinstrap <- subset(penguins, species == "Chinstrap")
chin_fem <- subset(chinstrap, sex == "female")
View(chin_fem)
mean(chin_fem$body_mass_g)
source("C:/Users/user/OneDrive - University of Massachusetts/Documents/environmental_data/labs/11/Lab 11.R", echo=TRUE)
#BRCR vs late succession
fit_1 <- lm(birdhab$BRCR ~ birdhab$ls)
fit_1_coef <- coef(fit_1)
str(fit_1_coef)
fit_1_sum <- summary(fit_1)
str(fit_1_sum)
int_obs <- fit_1_coef[1]
slope_obs <- fit_1_coef[2]
sd_obs <- fit_1_sum$sigma
plot(
x = birdhab$ls,
y = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
main = "Simulated Data",
xlab = "late-successional forest",
ylab = "Brown Creeper Abundance")
n = 200
par(mfrow = c(2, 2), mar = c(1, 1, 1, 1))
for (i in 1:4)
{
x = runif(n = n)
plot(
x,
linear_simulator(x, y_int = 1, slope = 4.5, st_dev = 0.1),
main = "", xlab = "x", ylab = "y",
pch = 16, col = rgb(0, 0.2, 0, 0.2),
axes = FALSE)
box()
}
n = 400
par(mfrow = c(2, 2), mar = c(1, 1, 1, 1))
for (i in 1:4)
{
x = runif(n = n)
plot(
x, linear_simulator(x, y_int = 10, slope = -6.5, st_dev = 1.1),
main = "", xlab = "x", ylab = "y",
pch = 16, col = rgb(0, 0.2, 0, 0.2),
axes = FALSE)
box()
}
plot(
x = birdhab$ls,
y = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
main = "Simulated Data",
xlab = "late-successional forest",
ylab = "Brown Creeper Abundance")
rm( list = rm())
plot(
x = birdhab$ls,
y = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
main = "Simulated Data",
xlab = "late-successional forest",
ylab = "Brown Creeper Abundance")
##plot2
plot(
birdhab$ls, birdhab$BRCR,
xlab = "late-successional forest extent",
ylab = "Brown Creeper abundance",
pch = 19)
points(
x = birdhab$ls,
y = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
col = adjustcolor("red", alpha = 0.3),
pch = 16)
legend(
"topleft",
legend = c("data", "simulation"),
pch = 16,
col = c(1, adjustcolor("red", alpha = 0.3)))
##plot2
plot(
birdhab$ls, birdhab$BRCR,
xlab = "late-successional forest extent",
ylab = "Brown Creeper abundance",
pch = 19)
points(
x = birdhab$ls,
y = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
col = adjustcolor("red", alpha = 0.3),
pch = 16)
legend(
"topleft",
legend = c("data", "simulation"),
pch = 16,
col = c(1, adjustcolor("red", alpha = 0.3)))
##plot2
plot(
birdhab$ls, birdhab$BRCR,
xlab = "late-successional forest extent",
ylab = "Brown Creeper abundance",
pch = 19)
points(
x = birdhab$ls,
y = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
col = adjustcolor("red", alpha = 0.3),
pch = 16)
legend(
"topleft",
legend = c("data", "simulation"),
pch = 16,
col = c(1, adjustcolor("red", alpha = 0.3)))
##plot2
plot(
birdhab$ls, birdhab$BRCR,
xlab = "late-successional forest extent",
ylab = "Brown Creeper abundance",
pch = 19)
points(
x = birdhab$ls,
y = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
col = adjustcolor("red", alpha = 0.3),
pch = 16)
legend(
"topleft",
legend = c("data", "simulation"),
pch = 16,
col = c(1, adjustcolor("red", alpha = 0.3)))
##plot2
plot(
birdhab$ls, birdhab$BRCR,
xlab = "late-successional forest extent",
ylab = "Brown Creeper abundance",
pch = 19)
points(
x = birdhab$ls,
y = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
col = adjustcolor("red", alpha = 0.3),
pch = 16)
legend(
"topleft",
legend = c("data", "simulation"),
pch = 16,
col = c(1, adjustcolor("red", alpha = 0.3)))
##plot2
plot(
birdhab$ls, birdhab$BRCR,
xlab = "late-successional forest extent",
ylab = "Brown Creeper abundance",
pch = 19)
points(
x = birdhab$ls,
y = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
col = adjustcolor("red", alpha = 0.3),
pch = 16)
legend(
"topleft",
legend = c("data", "simulation"),
pch = 16,
col = c(1, adjustcolor("red", alpha = 0.3)))
##plot2
plot(
birdhab$ls, birdhab$BRCR,
xlab = "late-successional forest extent",
ylab = "Brown Creeper abundance",
pch = 19)
points(
x = birdhab$ls,
y = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
col = adjustcolor("red", alpha = 0.3),
pch = 16)
legend(
"topleft",
legend = c("data", "simulation"),
pch = 16,
col = c(1, adjustcolor("red", alpha = 0.3)))
##plot2
plot(
birdhab$ls, birdhab$BRCR,
xlab = "late-successional forest extent",
ylab = "Brown Creeper abundance",
pch = 19)
points(
x = birdhab$ls,
y = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
col = adjustcolor("red", alpha = 0.3),
pch = 16)
legend(
"topleft",
legend = c("data", "simulation"),
pch = 16,
col = c(1, adjustcolor("red", alpha = 0.3)))
##plot2
plot(
birdhab$ls, birdhab$BRCR,
xlab = "late-successional forest extent",
ylab = "Brown Creeper abundance",
pch = 19)
points(
x = birdhab$ls,
y = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
col = adjustcolor("red", alpha = 0.3),
pch = 16)
legend(
"topleft",
legend = c("data", "simulation"),
pch = 16,
col = c(1, adjustcolor("red", alpha = 0.3)))
##plot2
plot(
birdhab$ls, birdhab$BRCR,
xlab = "late-successional forest extent",
ylab = "Brown Creeper abundance",
pch = 19)
points(
x = birdhab$ls,
y = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
col = adjustcolor("red", alpha = 0.3),
pch = 16)
legend(
"topleft",
legend = c("data", "simulation"),
pch = 16,
col = c(1, adjustcolor("red", alpha = 0.3)))
##plot2
plot(
birdhab$ls, birdhab$BRCR,
xlab = "late-successional forest extent",
ylab = "Brown Creeper abundance",
pch = 19)
points(
x = birdhab$ls,
y = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
col = adjustcolor("red", alpha = 0.3),
pch = 16)
legend(
"topleft",
legend = c("data", "simulation"),
pch = 16,
col = c(1, adjustcolor("red", alpha = 0.3)))
max_x = max(birdhab$ls)
for(j in 1:length(sample_sizes))
{
# A sequence of equally-spaced x-values:
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sample_size_powers[j] = sum(p_vals < alpha) / n_sims
}
##simulating sample sizes
alpha = 0.05
n_sims = 1000
p_vals = numeric(n_sims)
sample_sizes = seq(5, 100)
sample_size_powers = numeric(length(sample_sizes))
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
for(j in 1:length(sample_sizes))
{
# A sequence of equally-spaced x-values:
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sample_size_powers[j] = sum(p_vals < alpha) / n_sims
}
linear_sim_fit = function(x, slope, y_int, st_dev) {
y_sim = linear_simulator(
x = x,
y_int = y_int,
slope = slope,
st_dev = st_dev
)
fit_sim = lm(y_sim ~ x)
return(fit_sim)
}
##simulating sample sizes
alpha = 0.05
n_sims = 1000
p_vals = numeric(n_sims)
sample_sizes = seq(5, 100)
sample_size_powers = numeric(length(sample_sizes))
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
for(j in 1:length(sample_sizes))
{
# A sequence of equally-spaced x-values:
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sample_size_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_sample_size =
data.frame(
sample_size = sample_sizes,
power       = sample_size_powers)
plot(
power ~ sample_size, data = sim_sample_size,
type = 'l', xlab = 'Sample size', ylab = 'Power')
source("C:/Users/user/OneDrive - University of Massachusetts/Documents/environmental_data/labs/11/Lab 11.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
```{r load_data}
dat_1 = read.csv(here("data", "bird.sub.csv"))
dat_2 = read.csv(here("data", "hab.sub.csv"))
birdhab = merge(dat_1, dat_2, by = c("basin", "sub"))
dim(birdhab)
plot(BRCR ~ ls, data = birdhab)
fit_1 = lm(BRCR ~ ls, data = birdhab)
abline(fit_1)
summary(fit_1)
```
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
contour(
y = sim_3_dat$sample_size,
x = sim_3_dat$pop_sd,
z = sim_3_dat$power,
ylab = "sample size",
xlab = "standard deviation",
main = "Contour Plot of Statistical Power",
levels = seq(0, 1, length.out = 9),
drawlabels = TRUE,
# method = "simple")
method = "edge")
contour(
y = sim_3_dat$sample_size,
x = sim_3_dat$pop_sd,
z = sim_3_dat$power,
ylab = "sample size",
xlab = "standard deviation",
main = "Contour Plot of Statistical Power",
levels = seq(0, 1, length.out = 9),
drawlabels = TRUE,
# method = "simple")
method = "edge")
p_vals = numeric(n_sims)
# What was the observed standard deviation?
sd_obs
require(rgl)
persp3d(
y = sim_3_dat$sample_size,
x = sim_3_dat$pop_sd,
z = sim_3_dat$power
)
# Start with a small number
n_sims = 10
p_vals = numeric(n_sims)
# What was the observed standard deviation?
sd_obs
# specify the number of different standard deviation values to simulate:
# Start with a small number
n_sds = 20
pop_sds = seq(from = 0.05, to = , length.out = n_sds)
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
pop_sd_powers = numeric(n_sds)
sample_sizes = seq(5, 100)
sim_output_3 = matrix(nrow = length(effect_sizes), ncol = length(sample_sizes))
for(k in 1:length(pop_sds))
{
pop_sd_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = effect_size,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients
}
p_vals[i] = summary(fit_sim)$coefficients
p_vals[i] = summary(fit_sim)
a
source("C:/Users/User/OneDrive - University of Massachusetts/Documents/environmental_data/assignments/data_analysis_final.R", echo=TRUE)

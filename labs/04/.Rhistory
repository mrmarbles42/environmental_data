x <- seq(0, 20, length.out = 1000)
y <- dnorm(x, mean=10.4, sd=2.4)
plot(x , y,
type = "l",
main = "Normal density distribution (mean = 10.4, sd = 2.4)")
abline(v=10.4)
point <- sample(10, size = 1000, replace = T)
xmin <- 1
xmax <- 1000
set.seed(42)
a <- rnorm(42, mean = 21, sd = 2)
plot(log10(a),
type = "b",
cex = 2,
pch = 1,
col = c("blue", "red"))
b <- rpois(n = 42, lambda = 42)
plot(b,
type = "s",
col = "lightblue")
plot(log10(a),
type = "h",
col = "forestgreen")
plot(a,
type = "o",
col = "purple")
par(mfrow = c(2,2))
plot(log10(a),
type = "b",
cex = 2,
pch = 1,
col = c("blue", "red"))
plot(b,
type = "s",
col = "lightblue")
plot(log10(a),
type = "h",
col = "forestgreen")
plot(a,
type = "o",
col = "purple")
plot(y~x, data = dat_random,
main = "random datapoints + line")
#Q11
n_pts = 10
x_min = 1
x_max = 10
x_random = runif(n = n_pts, min = x_min, max = x_max)
y_random = rnorm(n = n_pts)
guess_x <- 5
guess_y <- 0
guess_slope <- 0.1
plot(y~x, data = dat_random,
main = "random datapoints + line")
# X values are uniformly distributed
x_random = runif(n = n_pts, min = x_min, max = x_max)
# Y values are normally-distributed.
# I used the default parameters for mean and sd.
y_random = rnorm(n = n_pts)
dat_random = data.frame(x = x_random, y = y_random)
plot(y~x, data = dat_random,
main = "random datapoints + line")
curve(line_point_slope(x, guess_x, guess_y, guess_slope), add = T)
dat_random[,3] <- line_point_slope(dat_random$x, guess_x, guess_y, guess_slope)
names(dat_random)[3] <- "y_predicted"
residual <- (dat_random$y_predicted - dat_random$y)
dat_random[,4] <- residual
names(dat_random)[4] <- "residuals"
hist(dat_random$residuals,
xlab = "residuals",
main = "Predicted model residuals")
plot(residuals ~ y_predicted, data = dat_random,
main = "Predicted Y-values vs residuals")
source("C:/Users/user/OneDrive - University of Massachusetts/Documents/environmental_data/labs/04/lab_4.R", echo=TRUE)
source("C:/Users/user/OneDrive - University of Massachusetts/Documents/environmental_data/labs/04/lab_4.R", echo=TRUE)
plot(y~x, data = dat_random,
main = "random datapoints + line")
plot(y~x, data = dat_random,
main = "random datapoints + line")
plot(y~x, data = dat_random,
main = "random datapoints + line")
plot(y~x, data = dat_random,
main = "random datapoints + line")
plot(y~x, data = dat_random,
main = "random datapoints + line")
curve(line_point_slope(x, guess_x, guess_y, guess_slope), add = T)
plot(y~x, data = dat_random,
main = "random datapoints + line")
curve(line_point_slope(x, guess_x, guess_y, guess_slope), add = T)
rbinom(3, 4, 0.75)
dbinom(3, 4, 0.75)
#Q2
pbinom(3, 5, 0.75)
#Q2
dbinom(3, 4, 0.75) - dbinom(2, 4, 0.75) - dbinom(1, 4, 0.75)
#Q2
dbinom(3, 4, 0.75) + dbinom(2, 4, 0.75) + dbinom(1, 4, 0.75)
#Q2
dbinom(3,4,0.75, lower.tail = F)
#Q2
dbinom(3,4,0.75, lower.tail = T)
#Q2
pbinom(3,4,0.75, lower.tail = T)
#Q2
pbinom(3,4,0.75, lower.tail = F)
#Q2
pbinom(3, 4, 0.75)
#Q1
dbinom(3, 4, 0.75)
#Q3
pbinom(3, 5, 0.75, lower.tail = T)
#Q2
pbinom(3, 4, 0.75)
#Q2
pbinom(3, 4, 0.75) - pbinom(3, 4, 0.75)
#Q2
pbinom(4, 4, 0.75) - pbinom(3, 4, 0.75)
#Q3
pbinom(5, 5, 0.75) - pbinom(3, 5, 0.75)
#Q3
pbinom(5, 5, 0.75, lower.tail = T) - pbinom(3, 5, 0.75, lower.tail = T)
#Q2
pbinom(3, 4, 0.75, lower.tail = F)
#Q2
pbinom(3, 4, 0.75) + pbinom(2, 4, 0.75) + pbinom(1, 4, 0.75)
#Q4
pnorm(1.2, 2, 2)
#Q5
hist(pnorm(1.2, 2, 2))
#Q5
hist(pnorm(x, 2, 2))
#Q5
pnorm(10,2,2)
#Q5
pnorm(15,2,2)
#Q5
pnorm(12,2,2)
#Q5
pnorm(14,2,2)
#Q5
pnorm(13,2,2)
#Q5
pnorm(13,2,2)-pnorm(1.2,2,2)
#Q6
pnorm(3.2,2,2)-pnorm(1.2,2,2)

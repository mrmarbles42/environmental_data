for(j in 1:length(sample_sizes))
{
# A sequence of equally-spaced x-values:
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sample_size_powers[j] = sum(p_vals < alpha) / n_sims
}
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
summary(fit_sim)$coefficients
alpha = 0.05
n_sims = 30
p_vals = numeric(n_sims)
sample_sizes = seq(1, 20)
sample_size_powers = numeric(length(sample_sizes))
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
alpha = 0.05
n_sims = 1000
p_vals = numeric(n_sims)
sample_sizes = seq(5, 100)
sample_size_powers = numeric(length(sample_sizes))
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
for(j in 1:length(sample_sizes))
{
# A sequence of equally-spaced x-values:
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sample_size_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_sample_size =
data.frame(
sample_size = sample_sizes,
power       = sample_size_powers)
alpha = 0.05
n_sims = 30
p_vals = numeric(n_sims)
sample_sizes = seq(5, 100)
sample_size_powers = numeric(length(sample_sizes))
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
for(j in 1:length(sample_sizes))
{
# A sequence of equally-spaced x-values:
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, "Pr(>|t|)"]
}
sample_size_powers[j] = sum(p_vals < alpha) / n_sims
}
View(sim_sample_size)
sim_sample_size =
data.frame(
sample_size = sample_sizes,
power       = sample_size_powers)
View(sim_sample_size)
alpha = 0.05
n_sims = 30
p_vals = numeric(n_sims)
sample_sizes = seq(1, 20)
sample_size_powers = numeric(length(sample_sizes))
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
for(j in 1:length(sample_sizes))
{
# A sequence of equally-spaced x-values:
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, "Pr(>|t|)"]
}
sample_size_powers[j] = sum(p_vals < alpha) / n_sims
}
curve(
exp_fun(2.2, 1/15, x),
from = 0,
to = 50,
add = F,
axes = T,
main = "Exponential function",
ylab = "f(x)",
xlab = "x"
)
source("C:/Users/user/OneDrive - University of Massachusetts/Documents/environmental_data/labs/lab_12.R", echo=TRUE)
curve(
exp_fun(2.2, 1/15, x),
from = 0,
to = 50,
add = F,
axes = T,
main = "Exponential function",
ylab = "f(x)",
xlab = "x"
)
fit_exp_nls = nls(
disp.rate.ftb ~ exp_fun(dist.class, a, b),
data = dat_dispersal,
start = list(b = 0, a = 1))
fit_exp_nls = nls(
disp.rate.ftb ~ exp_fun(dist.class, a, b),
data = dat_dispersal,
start = list(b = 0, a = 1))
fit_exp_nls = nls(
disp.rate.ftb ~ ricker_fun(dist.class, a, b),
data = dat_dispersal,
start = list(b = 0, a = 1))
summary(fit_wxp_nls)
summary(fit_exp_nls)
curve(
exp_fun(2.2, 1/15, x),
from = 0,
to = 50,
add = F,
axes = T,
main = "Exponential function",
ylab = "f(x)",
xlab = "x"
)
lines(predict(fit_ricker_nls, newdata = dist_newdata))
dist_newdata = data.frame(dist.class = seq(0, 1600, length.out = 1600))
lines(predict(fit_ricker_nls, newdata = dist_newdata))
lines(predict(fit_ricker_nls, newdata = dist_newdata))
legend("topright", legend = c("nls fit"), lty = 1, col = c(1))
ptrs()
??ptrs
fit_exp_nls = nls(
disp.rate.ftb ~ exp_fun(dist.class, a, b),
data = dat_dispersal,
start = list(b = 0, a = 1))
thetas = c(0, 0.5 * pi, pi, 1.5 * pi)
# Choose a random angle
theta = sample(thetas, size = 1)
# Choose a random angle
theta = sample(thetas, size = 1)
print(theta, digits = 3)
# Choose a random angle
theta = sample(thetas, size = 1)
print(theta, digits = 3)
# Choose a random angle
theta = sample(thetas, size = 1)
print(theta, digits = 3)
# Choose a random angle
theta = sample(thetas, size = 1)
print(theta, digits = 3)
# Calculate the x- and y- distances
# Round to 3 decimal points
delta_x = round(cos(theta), 3)
delta_y = round(sin(theta), 3)
print(data.frame(delta_x = delta_x, delta_y = delta_y))
step_length = 1
step_length = runif(n = 1, min = 1, max = 2)
step_length = rexp(n = 1, rate = 1)
#Random walk sample----
n_steps = 100
# Create our empty data frame
walk = data.frame(
step = numeric(n_steps + 1),
x = numeric(n_steps + 1),
y = numeric(n_steps + 1)
)
View(walk)
# Create our empty data frame
walk = data.frame(
step = (n_steps + 1),
x = numeric(n_steps + 1),
y = numeric(n_steps + 1)
)
View(walk)
n_steps = 1000
# Create our empty data frame
walk = data.frame(
step = numeric(n_steps + 1),
x = numeric(n_steps + 1),
y = numeric(n_steps + 1)
)
for (i in 1:n_steps)
{
# Choose a step length:
step_length = rexp(n = 1, rate = 1)
# Choose a random direction:
theta = sample(thetas, size = 1)
# What is the current position?
current_x = walk$x[i]
current_y = walk$y[i]
# Figure out the change in the x- and y-directions:
delta_x = step_length * round(cos(theta), 3)
delta_y = step_length * round(sin(theta), 3)
# Record the new position
walk$x[i + 1] = current_x + delta_x
walk$y[i + 1] = current_y + delta_y
# Record the step number:
walk$step[i + 1] = i
}
View(walk)
plot(y ~ x, data = walk, type = "l", asp = 1)
random_walk <- function(n_steps) {
n_steps = n_steps
# Create our empty data frame
walk = data.frame(
step = numeric(n_steps + 1),
x = numeric(n_steps + 1),
y = numeric(n_steps + 1)
)
for (i in 1:n_steps)
{
# Choose a step length:
step_length = rexp(n = 1, rate = 1)
# Choose a random direction:
theta = sample(thetas, size = 1)
# What is the current position?
current_x = walk$x[i]
current_y = walk$y[i]
# Figure out the change in the x- and y-directions:
delta_x = step_length * round(cos(theta), 3)
delta_y = step_length * round(sin(theta), 3)
# Record the new position
walk$x[i + 1] = current_x + delta_x
walk$y[i + 1] = current_y + delta_y
# Record the step number:
walk$step[i + 1] = i
}
}
random_walk <- function(n_steps) {
n_steps = n_steps
# Create our empty data frame
walk = data.frame(
step = numeric(n_steps + 1),
x = numeric(n_steps + 1),
y = numeric(n_steps + 1)
)
for (i in 1:n_steps)
{
# Choose a step length:
step_length = rexp(n = 1, rate = 1)
# Choose a random direction:
theta = sample(thetas, size = 1)
# What is the current position?
current_x = walk$x[i]
current_y = walk$y[i]
# Figure out the change in the x- and y-directions:
delta_x = step_length * round(cos(theta), 3)
delta_y = step_length * round(sin(theta), 3)
# Record the new position
walk$x[i + 1] = current_x + delta_x
walk$y[i + 1] = current_y + delta_y
# Record the step number:
walk$step[i + 1] = i
}
plot(y ~ x, data = walk, type = "l", asp = 1)
points(
y ~ x, data = head(walk, 1),
pch = 21, col = 1, bg = "steelblue")
points(
y ~ x, data = tail(walk, 1),
pch = 21, col = 1, bg = "red")
}
random_walk(1000)
random_walk(1000)
random_walk(1000)
plot_walk = function(dat_walk, ...)
{
plot(y ~ x, data = dat_walk, type = "l", asp = 1, ...)
# Plot a blue-filled point at the starting point
points(
y ~ x, data = head(dat_walk, 1),
pch = 21, col = 1, bg = "steelblue")
# Plot a red-filled point at the end of the walk
points(
y ~ x, data = tail(dat_walk, 1),
pch = 21, col = 1, bg = "red")
}
grid_walk <- function(n_steps) {
n_steps = n_steps
# Create our empty data frame
walk = data.frame(
step = numeric(n_steps + 1),
x = numeric(n_steps + 1),
y = numeric(n_steps + 1)
)
for (i in 1:n_steps)
{
# Choose a step length:
step_length = rexp(n = 1, rate = 1)
# Choose a random direction:
theta = sample(thetas, size = 1)
# What is the current position?
current_x = walk$x[i]
current_y = walk$y[i]
# Figure out the change in the x- and y-directions:
delta_x = step_length * round(cos(theta), 3)
delta_y = step_length * round(sin(theta), 3)
# Record the new position
walk$x[i + 1] = current_x + delta_x
walk$y[i + 1] = current_y + delta_y
# Record the step number:
walk$step[i + 1] = i
}
}
grid_walk(100)
View(walk)
grid_walk <- function(n_steps) {
n_steps = n_steps
# Create our empty data frame
walk = data.frame(
step = numeric(n_steps + 1),
x = numeric(n_steps + 1),
y = numeric(n_steps + 1)
)
for (i in 1:n_steps)
{
# Choose a step length:
step_length = rexp(n = 1, rate = 1)
# Choose a random direction:
theta = sample(thetas, size = 1)
# What is the current position?
current_x = walk$x[i]
current_y = walk$y[i]
# Figure out the change in the x- and y-directions:
delta_x = step_length * round(cos(theta), 3)
delta_y = step_length * round(sin(theta), 3)
# Record the new position
walk$x[i + 1] = current_x + delta_x
walk$y[i + 1] = current_y + delta_y
# Record the step number:
walk$step[i + 1] = i
}
return(walk)
}
grid_walk(100)
return(data.frame(walk))
grid_walk <- function(n_steps) {
n_steps = n_steps
# Create our empty data frame
walk = data.frame(
step = numeric(n_steps + 1),
x = numeric(n_steps + 1),
y = numeric(n_steps + 1)
)
for (i in 1:n_steps)
{
# Choose a step length:
step_length = rexp(n = 1, rate = 1)
# Choose a random direction:
theta = sample(thetas, size = 1)
# What is the current position?
current_x = walk$x[i]
current_y = walk$y[i]
# Figure out the change in the x- and y-directions:
delta_x = step_length * round(cos(theta), 3)
delta_y = step_length * round(sin(theta), 3)
# Record the new position
walk$x[i + 1] = current_x + delta_x
walk$y[i + 1] = current_y + delta_y
# Record the step number:
walk$step[i + 1] = i
}
return(data.frame(walk))
}
grid_walk(100)
grid_walk <- function(n_steps) {
n_steps = n_steps
# Create our empty data frame
walk = data.frame(
step = numeric(n_steps + 1),
x = numeric(n_steps + 1),
y = numeric(n_steps + 1)
)
for (i in 1:n_steps)
{
# Choose a step length:
step_length = rexp(n = 1, rate = 1)
# Choose a random direction:
theta = sample(thetas, size = 1)
# What is the current position?
current_x = walk$x[i]
current_y = walk$y[i]
# Figure out the change in the x- and y-directions:
delta_x = step_length * round(cos(theta), 3)
delta_y = step_length * round(sin(theta), 3)
# Record the new position
walk$x[i + 1] = current_x + delta_x
walk$y[i + 1] = current_y + delta_y
# Record the step number:
walk$step[i + 1] = i
}
data.frame(walk)
}
grid_walk(100)
grid_walk <- function(n_steps) {
n_steps = n_steps
thetas = c(0, 0.5 * pi, pi, 1.5 * pi)
# Create our empty data frame
walk = data.frame(
step = numeric(n_steps + 1),
x = numeric(n_steps + 1),
y = numeric(n_steps + 1)
)
for (i in 1:n_steps)
{
# Choose a step length:
step_length = rexp(n = 1, rate = 1)
# Choose a random direction:
theta = sample(thetas, size = 1)
# What is the current position?
current_x = walk$x[i]
current_y = walk$y[i]
# Figure out the change in the x- and y-directions:
delta_x = step_length * round(cos(theta), 3)
delta_y = step_length * round(sin(theta), 3)
# Record the new position
walk$x[i + 1] = current_x + delta_x
walk$y[i + 1] = current_y + delta_y
# Record the step number:
walk$step[i + 1] = i
}
}
grid_walk <- function(n_steps) {
n_steps = n_steps
thetas = c(0, 0.5 * pi, pi, 1.5 * pi)
# Create our empty data frame
walk = data.frame(
step = numeric(n_steps + 1),
x = numeric(n_steps + 1),
y = numeric(n_steps + 1)
)
for (i in 1:n_steps)
{
# Choose a step length:
step_length = rexp(n = 1, rate = 1)
# Choose a random direction:
theta = sample(thetas, size = 1)
# What is the current position?
current_x = walk$x[i]
current_y = walk$y[i]
# Figure out the change in the x- and y-directions:
delta_x = step_length * round(cos(theta), 3)
delta_y = step_length * round(sin(theta), 3)
# Record the new position
walk$x[i + 1] = current_x + delta_x
walk$y[i + 1] = current_y + delta_y
# Record the step number:
walk$step[i + 1] = i
}
dat_walk = walk
}
grid_walk(100)
grid_walk <- function(n_steps) {
n_steps = n_steps
thetas = c(0, 0.5 * pi, pi, 1.5 * pi)
# Create our empty data frame
walk = data.frame(
step = numeric(n_steps + 1),
x = numeric(n_steps + 1),
y = numeric(n_steps + 1)
)
for (i in 1:n_steps)
{
# Choose a step length:
step_length = rexp(n = 1, rate = 1)
# Choose a random direction:
theta = sample(thetas, size = 1)
# What is the current position?
current_x = walk$x[i]
current_y = walk$y[i]
# Figure out the change in the x- and y-directions:
delta_x = step_length * round(cos(theta), 3)
delta_y = step_length * round(sin(theta), 3)
# Record the new position
walk$x[i + 1] = current_x + delta_x
walk$y[i + 1] = current_y + delta_y
# Record the step number:
walk$step[i + 1] = i
}
return(dat_walk = walk)
}
grid_walk(100)

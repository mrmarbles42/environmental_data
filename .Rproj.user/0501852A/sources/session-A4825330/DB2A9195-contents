---
title: "lab_2"
author: "Evan Krause"
date: "2022-09-07"
output: html_document
---

```{r}
n = 10
vec_1 = sample(12, n, replace = TRUE)
paste0("Sum of elements with value 3: ", sum(vec_1 == 3))
```


1.
```{r}
vec_2 <- vec_1 == 3
```
2. It is possible to mistake an element of value 3 with one that looks similar such as 33 and the data set is so large that it would be easy to miss a single digit element.

3. The sampled vector changed at random each time, changing the amount of times 3 occurred.  

4. This method gets rid of the possibility of human error in counting the instances.

5. The manual method of subsetting is both time consuming in large datasets and prone to error due to the randomization of the sample each time.

6.
```{r}
for (i in 1:10)
{
  print(
    paste0("This is loop iteration:", i))
}
```
7.
```{r}
n <- 5
  for (i in 1:n) {
  print(
    paste0("this is iteration: ", i)
  )
}
```

8.
```{r}
n <- 10
vec_1 <- sample(1:10, n, replace = T)

for (i in 1:n) {
  print(
    paste0("the element of vec_1 at index ", i, 
           " is ", vec_1[i]
           )
    )
}
```

9. 
```{r}
create_and_print_vec <- function(n, min = 1, max = 10) {
  for (i in 1:n) {
    
    #it.setup
    vec_n = sample(x = min:max, 
                   size = n)
    
    #it.loop
    print(
      paste0(
        "The element at index ", i, " is ", vec_n[i]))
  }
}
```

